{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","injectJSS","app","textAlign","appHeader","backgroundColor","minHeight","display","flexDirection","alignItems","justifyContent","fontSize","color","_ref","classes","_useState","useState","_useState2","Object","slicedToArray","isRecognizing","setIsRecognizing","_useState3","_useState4","words","setWords","_useState5","_useState6","speechRecognition","setSpeechRecognition","_useState7","_useState8","speechSynth","setSpeechSynth","_useState9","_useState10","gotBingo","setGotBingo","useEffect","window","recognition","webkitSpeechRecognition","continuous","interimResults","lang","onstart","onresult","event","console","log","newWords","resultWords","results","length","result","n","transcript","prevWords","onerror","error","setTimeout","start","onend","alert","speechSynthesis","bingoWords","hasWordBeenSaid","word","RegExp","concat","test","every","utterance","SpeechSynthesisUtterance","speak","react_default","a","createElement","className","onClick","stop","map","i","key","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18546663.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport injectJSS from 'react-jss'\n\nconst styles = {\n  app: {\n    textAlign: 'center'\n  },\n  appHeader: {\n    backgroundColor: '#282c34',\n    minHeight: '20vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: 'calc(10px + 2vmin)',\n    color: 'white'\n  }\n}\n\nconst App = ({ classes }) => {\n  const [isRecognizing, setIsRecognizing] = useState(false)\n  const [words, setWords] = useState('')\n  const [speechRecognition, setSpeechRecognition] = useState(null)\n  const [speechSynth, setSpeechSynth] = useState(null)\n  const [gotBingo, setGotBingo] = useState(false)\n\n  const addWords = newWords => {\n    setWords(prevWords => {\n      console.log('previous:', prevWords)\n      console.log('next: ', newWords)\n      return prevWords + newWords + ' '\n    })\n  }\n\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('No speech recognition available')\n    } else {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = true\n      recognition.interimResults = false\n      recognition.lang = 'en-US'\n    \n      recognition.onstart = () => setIsRecognizing(true)\n      recognition.onresult = event => {\n        console.log(event)\n        let resultWords = ''\n        if(event.results.length){\n          const result = event.results[event.results.length - 1]\n          for(let n = 0; n < result.length; n++){\n            const resultPart = result[n]\n            resultWords += resultPart.transcript\n          }\n        }\n        \n        addWords(resultWords)\n      }\n      recognition.onerror = event => {\n        console.log('error', event)\n        if(event.error === 'no-speech'){\n          setTimeout(() => {\n            recognition.start() //Keep it coming\n          })\n          \n        }\n      }\n      recognition.onend = () => {\n        console.log('has ended')\n        setIsRecognizing(false)\n      }\n\n      recognition.start();\n\n      setSpeechRecognition(recognition)\n    }\n\n    if (!('speechSynthesis' in window) || !('SpeechSynthesisUtterance' in window)) {\n      alert('No speech synthesizer available')\n    }\n    else{\n      setSpeechSynth(window.speechSynthesis)\n    }\n  }, [])\n\n  const toggleRecognition = () => speechRecognition\n    && (isRecognizing\n      ? speechRecognition.stop()\n      : speechRecognition.start()\n    )\n\n  const bingoWords = ['I', 'like', 'bingo']\n\n  const hasWordBeenSaid = word => (new RegExp(`(\\\\s${word}\\\\s|^${word}\\\\s|\\\\s${word})`, 'gi')).test(words)\n\n  const haveAllWordsBeenSaid = () => bingoWords.every(hasWordBeenSaid)\n\n  useEffect(() => {\n    if(speechSynth && !gotBingo && haveAllWordsBeenSaid()){\n      setGotBingo(true)\n      const utterance = new window.SpeechSynthesisUtterance('BINGO!')\n      speechSynth.speak(utterance)\n    }\n  })\n\n  return (\n    <div className={classes.app}>\n      <header className={classes.appHeader}>\n        Say stuff!\n      </header>\n      <main>\n        <div>\n          <button onClick={toggleRecognition}>{isRecognizing ? 'Stop' : 'Start'}</button>\n        </div>\n        {bingoWords.map((word, i) =>\n          <div key={i}>\n            {`${word}: ${hasWordBeenSaid(word) ? 'true' : 'false'}`}\n          </div>\n        )}\n        <div>{words}</div>\n      </main>\n    </div>\n  )\n}\n\nexport default injectJSS(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}